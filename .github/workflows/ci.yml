name: Employee Management API CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

jobs:
  # Stage 1: Fast checks (run in parallel)
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Make mvnw executable
        run: chmod +x ./mvnw
      - name: Run tests
        run: ./mvnw clean test

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check code formatting
        run: |
          find src -name "*.java" -exec grep -l "  " {} \; | wc -l
          echo "Java files checked for formatting"
      - name: Check for TODO/FIXME comments
        run: |
          grep -r "TODO\|FIXME\|XXX" src/ --include="*.java" || echo "No TODO/FIXME found"

  # Stage 2: Build and package (after tests pass)
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Make mvnw executable
        run: chmod +x ./mvnw
      - name: Build application
        run: ./mvnw clean package -DskipTests
      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: employee-api-jar
          path: target/*.jar
          retention-days: 7

  # Stage 3: Integration tests (after build)
  integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: employee-api-jar
          path: target/
      - name: Test application startup
        run: |
          java -jar target/*.jar &
          APP_PID=$!
          sleep 10
          curl -f -u admin:admin123 http://localhost:8080/api/v1/employees || exit 1
          kill $APP_PID
      - name: Run API tests
        run: |
          java -jar target/*.jar &
          APP_PID=$!
          sleep 10
          EMPLOYEE_ID=$(curl -s -X POST http://localhost:8080/api/v1/employees \
            -u admin:admin123 \
            -H "Content-Type: application/json" \
            -d '{"firstName":"Test","lastName":"User","email":"test@example.com","phone":"+1234567890","position":"DEVELOPER","salary":75000.00,"hireDate":"2024-01-15","status":"ACTIVE"}' | \
            grep -o '"id":"[^"]*"' | cut -d'"' -f4)
          curl -f -u admin:admin123 http://localhost:8080/api/v1/employees
          curl -f -u admin:admin123 http://localhost:8080/api/v1/employees/$EMPLOYEE_ID
          curl -f -u admin:admin123 -X PUT http://localhost:8080/api/v1/employees/$EMPLOYEE_ID \
            -H "Content-Type: application/json" \
            -d '{"firstName":"Updated","lastName":"User","email":"updated@example.com","phone":"+1234567890","position":"SENIOR_DEVELOPER","salary":85000.00,"hireDate":"2024-01-15","status":"ACTIVE"}'
          curl -f -u admin:admin123 -X DELETE http://localhost:8080/api/v1/employees/$EMPLOYEE_ID
          kill $APP_PID

  # Stage 4: Quality and security (run in parallel after integration tests)
  code-quality:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Make mvnw executable
        run: chmod +x ./mvnw
      - name: Analyze code complexity
        run: |
          echo "=== Code Statistics ==="
          find src/main/java -name "*.java" | xargs wc -l | tail -1
          echo "=== Method Count ==="
          grep -r "public\|private\|protected" src/main/java --include="*.java" | grep "(" | wc -l
      - name: Check dependencies
        run: ./mvnw dependency:analyze
      - name: Validate documentation
        run: |
          [ -f README.md ] && echo "✓ README.md exists" || echo "✗ README.md missing"
          [ -f LICENSE ] && echo "✓ LICENSE exists" || echo "✗ LICENSE missing"

  security:
    runs-on: ubuntu-latest
    needs: integration-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
      - name: Run Trivy SARIF scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Stage 5: Deployment readiness (after all checks pass)
  docker:
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: employee-api-jar
          path: target/
      - name: Docker build test
        run: |
          echo "FROM eclipse-temurin:21-jre-alpine" > Dockerfile
          echo "COPY target/*.jar app.jar" >> Dockerfile
          echo "EXPOSE 8080" >> Dockerfile
          echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> Dockerfile
          docker build -t employee-api:${{ github.sha }} .
      - name: Test Docker container
        run: |
          docker run -d -p 8080:8080 --name test-container employee-api:${{ github.sha }}
          sleep 15
          curl -f -u admin:admin123 http://localhost:8080/api/v1/employees || exit 1
          docker stop test-container

  dependency-check:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Make mvnw executable
        run: chmod +x ./mvnw
      - name: Check for outdated dependencies
        run: ./mvnw versions:display-dependency-updates
      - name: Check for plugin updates
        run: ./mvnw versions:display-plugin-updates
      - name: Generate dependency tree
        run: ./mvnw dependency:tree > dependency-tree.txt
      - name: Upload dependency report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: dependency-tree.txt

  memory-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: employee-api-jar
          path: target/
      - name: Memory usage test
        run: |
          echo "=== Memory Test ==="
          java -Xmx128m -jar target/*.jar &
          APP_PID=$!
          sleep 15
          ps -p $APP_PID -o pid,vsz,rss,comm
          curl -f -u admin:admin123 http://localhost:8080/api/v1/employees
          kill $APP_PID
          echo "App runs successfully with 128MB heap"

  api-docs:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: employee-api-jar
          path: target/
      - name: Generate API documentation
        run: |
          java -jar target/*.jar &
          APP_PID=$!
          sleep 10
          echo "=== API Endpoints ==="
          curl -s -u admin:admin123 http://localhost:8080/api/v1/employees | echo "GET /api/v1/employees - OK"
          echo "POST /api/v1/employees - Create employee"
          echo "GET /api/v1/employees/{id} - Get employee by ID"
          echo "PUT /api/v1/employees/{id} - Update employee"
          echo "DELETE /api/v1/employees/{id} - Delete employee"
          kill $APP_PID
      - name: Create API documentation
        run: |
          echo "# API Documentation" > api-docs.md
          echo "" >> api-docs.md
          echo "## Endpoints" >> api-docs.md
          echo "- GET /api/v1/employees - Get all employees" >> api-docs.md
          echo "- POST /api/v1/employees - Create an employee" >> api-docs.md
          echo "- GET /api/v1/employees/{id} - Get employee by ID" >> api-docs.md
          echo "- PUT /api/v1/employees/{id} - Update employee" >> api-docs.md
          echo "- DELETE /api/v1/employees/{id} - Delete employee" >> api-docs.md
      - name: Upload API docs
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: api-docs.md

  backup:
    runs-on: ubuntu-latest
    needs: [code-quality, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Create source backup
        run: |
          tar -czf source-backup-${{ github.sha }}.tar.gz \
            src/ pom.xml README.md LICENSE .gitignore
      - name: Upload source backup
        uses: actions/upload-artifact@v4
        with:
          name: source-backup-${{ github.sha }}
          path: source-backup-${{ github.sha }}.tar.gz
          retention-days: 30
      - name: Create release notes
        run: |
          echo "# Release Notes - $(date)" > release-notes.md
          echo "" >> release-notes.md
          echo "## Commit: ${{ github.sha }}" >> release-notes.md
          echo "## Changes:" >> release-notes.md
          git log --oneline -5 >> release-notes.md
      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  release:
    runs-on: ubuntu-latest
    needs: [docker, performance, dependency-check, memory-test, api-docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      - name: Create release summary
        run: |
          echo "=== Release Summary ===" > release-summary.txt
          echo "Build: SUCCESS" >> release-summary.txt
          echo "Tests: PASSED" >> release-summary.txt
          echo "Security: SCANNED" >> release-summary.txt
          echo "Performance: TESTED" >> release-summary.txt
          echo "Docker: READY" >> release-summary.txt
          echo "Dependencies: CHECKED" >> release-summary.txt
          echo "Memory: OPTIMIZED" >> release-summary.txt
          echo "Documentation: GENERATED" >> release-summary.txt
          echo "Commit: ${{ github.sha }}" >> release-summary.txt
          echo "Date: $(date)" >> release-summary.txt
      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: release-summary.txt
      - name: List all artifacts
        run: |
          echo "=== Available Artifacts ==="
          ls -la
          find . -name "*.jar" -o -name "*.md" -o -name "*.txt" | head -10

  performance:
    runs-on: ubuntu-latest
    needs: integration-test
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: employee-api-jar
          path: target/
      - name: Install Apache Bench
        run: sudo apt-get update && sudo apt-get install -y apache2-utils
      - name: Performance test
        run: |
          java -jar target/*.jar &
          APP_PID=$!
          sleep 10
          echo "=== Performance Test Results ==="
          ab -n 100 -c 10 -A admin:admin123 http://localhost:8080/api/v1/employees
          kill $APP_PID

